# this workflow processes the hx rate fitting
# rule 1: generates

import pandas as pd

# set the config file path
configfile: '../config/config_merge.yml'

# set benchmark dirpath
benchmark_dpath = config['output_dirpath'] + '/benchmark'

# set the python scripts path
scripts_dirpath = config['path_to_repo'] + '/scripts/hx_rate'
hx_rate_fit_python_path = scripts_dirpath + '/hxratefit_snakemake.py'
merge_data_high_low_python = scripts_dirpath + '/merge_high_low_ph_data.py'
gen_backexch_array_python = scripts_dirpath + '/generate_backexchange_for_proteins.py'

# merge sample list filepath
merge_sample_list_fpath = config['output_dirpath'] + '/merge_sample.csv'

# hi low ph list filepath
merge_ph_list_fpath = config['output_dirpath'] + '/high_low_backexchange_list.csv'

merge_df = pd.read_csv(merge_sample_list_fpath)
low_name_list = list(merge_df['protein_name_low_ph'].values)
high_name_list = list(merge_df['protein_name_high_ph'].values)
seq_list = list(merge_df['sequence'].values)
prot_name_list = list(merge_df['protein_name'].values)

name_seq_dict = dict()

for num in range(len(prot_name_list)):
    name_seq_dict[low_name_list[num]] = seq_list[num]


hi_low_bkex_df = pd.read_csv(merge_ph_list_fpath)
low_name_list_ = list(hi_low_bkex_df['low_ph_protein_name'].values)
high_name_list_ = list(hi_low_bkex_df['high_ph_protein_name'].values)
low_ph_bkexch_list = list(hi_low_bkex_df['low_ph_backexchange_new'].values)
high_ph_bkexch_list = list(hi_low_bkex_df['high_ph_backexchange'].values)

high_ph_bkexc_name_dict = dict()
low_ph_bkexch_name_dict = dict()

for num2 in range(len(low_ph_bkexch_list)):
    low_ph_bkexch_name_dict[low_name_list_[num2]] = low_ph_bkexch_list[num2]
    high_ph_bkexc_name_dict[high_name_list_[num2]] = high_ph_bkexch_list[num2]



# need the backexchange array to do the fitting

rule all:

    input:  expand(config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_hxms_dist.csv', prot_name=prot_name_list, low_ph_name=low_name_list, high_ph_name=high_name_list)


rule merge_data_high_low:

    input:
        lowph_fpath = config['low_ph_hxms_fpath_dir'] + config['low_ph_level_to_fpaths']*'/{low_ph_name}' + config['hx_ms_fpath_delim_string'],
        highph_fpath = config['high_ph_hxms_fpath_dir'] + config['high_ph_level_to_fpaths']*'/{high_ph_name}' + config['hx_ms_fpath_delim_string'],
        lowph_corr_fpath = config['output_dirpath'] + '/low_ph_bkexch_corr.csv',
        highph_corr_fpath = config['output_dirpath'] + '/high_ph_bkexch_corr.csv'
    params:
        prot_seq = lambda wildcards: name_seq_dict[wildcards.low_ph_name],
        lowph_d2o_frac = config['low_ph_d2o_frac'],
        lowph_d2o_pur = config['low_ph_d2o_pur'],
        highph_d2o_frac = config['high_ph_d2o_frac'],
        highph_d2o_pur = config['high_ph_d2o_pur'],
        low_ph_bkexch = lambda wildcards: low_ph_bkexch_name_dict[wildcards.low_ph_name],
        high_ph_bkexch = lambda wildcards: high_ph_bkexc_name_dict[wildcards.high_ph_name]
    output:
        mergebkex_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_backexchange.csv',
        mergebkex_corr_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_backexchange_correction.csv',
        merge_dist_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_hxms_dist.csv',
        merge_factor_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_factor.csv',
        merge_plot_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_{high_ph_name}_merge_hxms_dist_plot.pdf',
    shell:
        'python ' + merge_data_high_low_python + ' -seq {params.prot_seq} -ldata {input.lowph_fpath} -ldf {params.lowph_d2o_frac} -ldp {params.lowph_d2o_pur} -lbk {params.low_ph_bkexch} -lbkc {input.lowph_corr_fpath} -hdata {input.highph_fpath} -hdf {params.highph_d2o_frac} -hdp {params.highph_d2o_pur} -hbk {params.high_ph_bkexch} -hbkc {input.highph_corr_fpath} -mbk {output.mergebkex_output} -mbkc {output.mergebkex_corr_output} -mdp {output.merge_dist_output} -mpp {output.merge_plot_output} -mfp {output.merge_factor_output}'




    # rule generate_backexchange_array_for_low_ph_data:
    #
    #     input:
    #         hxms_fpath = config['low_ph_hxms_fpath_dir'] + config['low_ph_level_to_fpaths']*'/{low_ph_name}' + config['hx_ms_fpath_delim_string'],
    #         bkexch_corr_fpath = config['output_dirpath'] + '/low_ph_bkexch_corr.csv',
    #     params:
    #         prot_seq = lambda wildcards: name_seq_dict[wildcards.prot_name],
    #         d2o_frac = config['low_ph_d2o_frac'],
    #         d2o_pur = config['low_ph_d2o_pur'],
    #         backexch_value = lambda wildcards: low_ph_bkexch_name_dict[wildcards.low_ph_name]
    #     output:
    #         backexchange_output = config['output_dirpath'] + '/{prot_name}/{low_ph_name}_backexchange_array.csv'
    #     shell:
    #         'python ' + gen_backexch_array_python + ' -s {params.prot_seq} -i {input.hxms_fpath} -df {params.d2o_frac} -dp {params.d2o_pur} -ub {params.backexch_value} -bcf {input.bkexch_corr_fpath} -o {output.backexchange_output}'
    #
    #
    # rule generate_backexchange_array_for_high_ph_data:
    #
    #     input:
    #         hxms_fpath = config['high_ph_hxms_fpath_dir'] + config['high_ph_level_to_fpaths']*'/{high_ph_name}' + config['hx_ms_fpath_delim_string'],
    #         bkexch_corr_fpath = config['output_dirpath'] + '/high_ph_bkexch_corr.csv',
    #     params:
    #         prot_seq = lambda wildcards: name_seq_dict[wildcards.prot_name],
    #         d2o_frac = config['high_ph_d2o_frac'],
    #         d2o_pur = config['high_ph_d2o_pur'],
    #         backexch_value = lambda wildcards: high_ph_bkexc_name_dict[wildcards.high_ph_name]
    #     output:
    #         backexchange_output = config['output_dirpath'] + '/{prot_name}/{high_ph_name}_backexchange_array.csv'
    #     shell:
    #         'python ' + gen_backexch_array_python + ' -s {params.prot_seq} -i {input.hxms_fpath} -df {params.d2o_frac} -dp {params.d2o_pur} -ub {params.backexch_value} -bcf {input.bkexch_corr_fpath} -o {output.backexchange_output}'
    #

